#include <esp_now.h>
#include <WiFi.h>
#include <WiFiClient.h>
#include <ESP32_FTPClient.h>
#include "octocat.h"
#include "espNow.h"

#define CHANNEL 1

#define WIFI_SSID ":("
#define WIFI_PASS "soulknight"


char ftp_server[] = "178.238.37.222";
char ftp_user[]   = "hostalek.gebhart.cz";
char ftp_pass[]   = "skyfox123";

// you can pass a FTP timeout and debbug mode on the last 2 arguments
ESP32_FTPClient ftp (ftp_server,ftp_user,ftp_pass, 34000, 2);

typedef struct DataStruct {
    float Audio;
    float Tmp1;
    int16_t AcX;
    int16_t AcY;
    int16_t AcZ;
    int16_t Tmp2;
    int16_t GyX;
    int16_t GyY;
    int16_t GyZ;
} DataStruct;
DataStruct dataStruct;

// Init ESP Now with fallback
void InitESPNow() {
    WiFi.disconnect();
    if (esp_now_init() == ESP_OK) {
        Serial.println("ESPNow Init Success");
    }
    else {
        Serial.println("ESPNow Init Failed");
        // Retry InitESPNow, add a counte and then restart?
        // InitESPNow();
        // or Simply Restart
        ESP.restart();
    }
}

// config AP SSID
void configDeviceAP() {
    const char *SSID = ":)";
    bool result = WiFi.softAP(SSID, "soulknight", CHANNEL, 0);
    if (!result) {
        Serial.println("AP Config failed.");
    } else {
        Serial.println("AP Config Success. Broadcasting with AP: " + String(SSID));
    }
}

void printIncomingData() {
    Serial.print("AcX = ");
    Serial.print(dataStruct.AcX);
    Serial.print(" | AcY = ");
    Serial.print(dataStruct.AcY);
    Serial.print(" | AcZ = ");
    Serial.print(dataStruct.AcZ);
    Serial.print(" | Temp = ");
    Serial.print(dataStruct.Tmp2);
    Serial.print(" | GyX = ");
    Serial.print(dataStruct.GyX);
    Serial.print(" | GyY = ");
    Serial.print(dataStruct.GyY);
    Serial.print(" | GyZ = ");
    Serial.print(dataStruct.GyZ);
    Serial.print(" | AUDIO: ");
    Serial.print(dataStruct.Audio);
    Serial.print(" | TEMPERATURE: ");
    Serial.println(dataStruct.Tmp1);
}
// callback when data is recv from Master
void OnDataRecv(const uint8_t *mac_addr, const uint8_t *data, int data_len) {
    char macStr[18];
    snprintf(macStr, sizeof(macStr), "%02x:%02x:%02x:%02x:%02x:%02x",
             mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);
    Serial.print("Last Packet Recv from: "); Serial.println(macStr);
    //Serial.print("Last Packet Recv Data: "); Serial.println(*data);
    DataStruct incdata;
    memcpy(&incdata, data, sizeof(incdata));
    dataStruct.Audio = incdata.Audio;
    dataStruct.Tmp1 = incdata.Tmp1;
    dataStruct.Tmp2 = incdata.Tmp2;
    dataStruct.AcX = incdata.AcX;
    dataStruct.AcY = incdata.AcY;
    dataStruct.AcZ = incdata.AcZ;
    dataStruct.GyX = incdata.GyX;
    dataStruct.GyY = incdata.GyY;
    dataStruct.GyZ = incdata.GyZ;
    printIncomingData();
    Serial.println("");
}

void handleFtp(){
    ftp.OpenConnection();

    // Get directory content
    ftp.InitFile("Type A");
    String list[128];
    ftp.ContentList("", list);
    Serial.println("\nDirectory info: ");
    for(int i = 0; i < sizeof(list); i++)
    {
        if(list[i].length() > 0)
            Serial.println(list[i]);
        else
            break;
    }

    // Create the new file and send the image
    ftp.InitFile("Type I");
    ftp.NewFile("octocat.jpg");
    ftp.WriteData( octocat_pic, sizeof(octocat_pic) );
    ftp.CloseFile();

    // Create the file new and write a string into it
    ftp.InitFile("Type A");
    ftp.NewFile("hello_world.txt");
    ftp.Write("Hello World");
    ftp.CloseFile();
    ftp.CloseConnection();
}

void setup() {
    Serial.begin(115200);
    Serial.println("THIS DEVICE IS SERVER - ESPNow, FTP");

    //setup connection to internet
    //WiFi.mode(WIFI_AP_STA);
    WiFi.begin( WIFI_SSID, WIFI_PASS );
    Serial.println("Connecting Wifi...");
    long long oldTime = millis();
    Serial.print("Connecting to wifi ");
    while (WiFi.status() != WL_CONNECTED) {
        if(millis()-oldTime > 10000){
            Serial.println("FAILED!... RESTARTING DEVICE");
            delay(1000);
            ESP.restart();
        }
    }
    Serial.println("");
    Serial.print("IP address: ");
    Serial.println(WiFi.localIP());

    handleFtp();

    // configure device AP mode - create new wifi for slaves
    configDeviceAP();
    // This is the mac address of the Slave in AP Mode
    Serial.print("AP MAC: "); Serial.println(WiFi.softAPmacAddress());
    // Init ESPNow with a fallback logic
    InitESPNow();
    // Once ESPNow is successfully Init, we will register for recv CB to
    // get recv packer info.
    esp_now_register_recv_cb(OnDataRecv);
}

void loop() {
    // Chill
}